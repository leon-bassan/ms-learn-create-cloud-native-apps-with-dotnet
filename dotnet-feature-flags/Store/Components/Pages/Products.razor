@page "/products"

@using DataEntities
@using Store.Services
@using Microsoft.FeatureManagement

@inject ProductService ProductService
@inject IConfiguration Configuration
@inject IFeatureManager FeatureManager

@attribute [StreamRendering(true)]


@inject ILogger<Products> Logger
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration

<PageTitle>Products</PageTitle>

<h1>Products</h1>

<p>Here are some of our amazing outdoor products that you can purchase.</p>

@if (_salesOn)
{
<div class="alert alert-success" role="alert">
    Our sale is now on.
</div>
}

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else if (products.Count == 0) {
    <p><em>There is a problem loading our products. Please try again later.</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Image</th>
                <th>Name</th>
                <th>Description</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td><img height="80" width="80" src="https://raw.githubusercontent.com/MicrosoftDocs/mslearn-dotnet-cloudnative/main/dotnet-docker/Products/wwwroot/images/@product.ImageUrl" /></td>
                    <td>@product.Name</td>
                    <td>@product.Description</td>
                    <td>
                        @if (_salesOn)
                        {
                            <strike>@(product.Price)</strike>
                            @((product.Price * _discountPercentage).ToString("#.##"))
                        }
                        else
                        {
                            @product.Price
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Product>? products;
    private bool _salesOn = false;
    private decimal _discountPercentage;

    protected override async Task OnInitializedAsync()
    {
        _salesOn = await FeatureManager.IsEnabledAsync("SeasonalDiscount");

        // Simulate asynchronous loading to demonstrate streaming rendering
        products = await ProductService.GetProducts();

        if (_salesOn)
        {
            _discountPercentage = Convert.ToDecimal(Configuration.GetSection("eShopLite__Store__DiscountPercent").Value);
        }
    }

}
